#!/usr/bin/env ruby

# if tmux ls | egrep -i copley; then
#   tmux a -t copley
# else
#   tmux new -s copley -c ~/repos/copley/www "$@"
# fi

require 'optparse'
require 'awesome_print'
require 'ostruct'
require 'yaml'

module MainCommand
  extend self

  PROJECT_HOME='<%= path %>'
  PROJECT='<%= project %>'

  attr_accessor :args, :stdinput, :stdoutput
  attr_accessor :piped_data
  attr_accessor :special_options
  attr_accessor :pwd, :original_pwd
  attr_accessor :config

  def run(args=ARGV.clone, input=$stdin, output=$stdout)
    @args, @stdinput, @stdoutput = args, input, output

    @original_pwd = Dir.pwd
    Dir.chdir(PROJECT_HOME)

    if File.exist?('hero.yml')
      file = 'hero.yml'
      io = IO.read(file)
      yml = YAML.load(io)
      @config = yml
    end

    @pwd = Dir.pwd

    parse_options

    subcommand = args.shift

    case subcommand
    when 'restart'
      update_start_file
    when 'start'
      if system('tmux ls | egrep -i <%= project %>')
        system(* %w{tmux a -t <%= project %>})
      else
        system(* ("tmux new -s <%= project %> -c <%= path %> " + @args.join(' ')).split(' '))
      end

      update_start_file

      system(format('tmux neww -t %s', PROJECT))
      system(format('tmux send -t %s "vim start%s"', PROJECT, "\n"))
    when 'refresh'
      update_start_file
    when 'dir', 'cdto', 'cd', 'path', 'home'
      Dir.chdir PROJECT_HOME
      printf '%s', PROJECT_HOME
    when 'run'
      system(* args)
    when ?t, 'tmux'
      if system('tmux ls | egrep -i <%= project %>')
        system(* %w{tmux a -t <%= project %>})
      else
        system(* ("tmux new -s <%= project %> -c <%= path %> " + @args.join(' ')).split(' '))
      end
    when ?i, 'issues'
      system(* %w{ghi list})
    when 'mki', 'mkissue', 'makei', 'makeissue', 'make-issue'
      system(* build_github_issues_command)
    when 'label', 'labels', 'listlabels'
      system(* %w{ghi label --list}, *args)
    else
      puts(sprintf 'Unknown Subcommand: %s', subcommand)
    end

    puts
  end

  def header(file, head, double_space=true)
    file.puts if double_space
    file.puts
    file.puts format('# %s', head)
    file.puts format('# %s', head).gsub(/./, ?-)
  end

  def update_start_file
    File.open('start', 'w+') do |file|
      header file, 'git recent-branches', false
      files = `git status -s`.lines.map(&:chomp)

      header file, 'git status'

      files = `git status -s`.lines.map(&:chomp)
      max_length = files.map{|f|
        f.sub(/^..(?:\s.* ->)?/, '').length
      }.max

      grouped = {}
      start_files = files.map do |f|
        fname = f.sub(/^(..) (.* -> )?/, '')
        replaced = f[/^..\s(?:.* -> )?/].sub(/\s*$/, '' )
        grouped.merge! replaced => grouped.fetch(replaced, []).push(fname)
        format("%-#{max_length}s  # %-s", fname, replaced)
      end

      grouped.each do |k,v|
        file.puts
        file.puts format('  ## %s', k)
        file.puts format('  ------', k)
        file.puts v.map{|vf| format('  %s', vf) }
      end

      file_list = `git ls-files`.lines.map(&:chomp)

      defer_regexps = %w{ start_file files defer regex }.inject(config) do |c,key|
        break [] if c[key] == nil
        c[key]
      end

      defer_literals = %w{ start_file files defer literal }.inject(config) do |c,key|
        break [] if c[key] == nil
        c[key]
      end

      exclude_regexps = %w{ start_file files exclude regex }.inject(config) do |c,key|
        break [] if c[key] == nil
        c[key]
      end

      exclude_literals = %w{ start_file files exclude literal }.inject(config) do |c,key|
        break [] if c[key] == nil
        c[key]
      end

      deferred_files = []

      file_list = defer_regexps.inject(file_list) do |flist,pattern|
        flist.select{|file|
          file[Regexp.new(pattern)] && deferred_files.push(file)
          file[Regexp.new(pattern)] == nil
        }
      end

      file_list = defer_literals.inject(file_list) do |flist,pattern|
        flist.select{|file|
          file[pattern] && deferred_files.push(file)
          file[pattern] == nil
        }
      end

      file_list = exclude_regexps.inject(file_list) do |flist,pattern|
        flist.select{|file|
          file[Regexp.new(pattern)] == nil
        }
      end

      file_list = exclude_literals.inject(file_list) do |flist,pattern|
        flist.select{|file|
          file[pattern] == nil
        }
      end

      header file, 'project files'
      file.puts file_list

      header file, 'deferred files'
      file.puts deferred_files

      file.puts
    end
  end

  def build_github_issues_command
    cmd = []
    values = []
    labels = nil
    assign_to = nil
    milestone = 1
    claim = false
    special_options.each do |opt|
      subcmd = opt.shift
      case subcmd
      when ':claim'
        claim = true
      when 'assign:', 'assign_to:'
        assign_to = opt.shift
      when 'labels:', 'tags:'
        labels = opt.map(&:strip).map{|o| o.sub(/,?$/,'') }.join(?,)
      when 'milestone:'
        milestone = opt.first
      end
    end

    formatted_cmd = []
    ## issue name
    # cmd << 'ghi open -m "%s"'
    # values << @args.join(' ')

    formatted_cmd << format('ghi open -m "%s"', @args.join(' '))

    ## milestone id
    # cmd << '-M %d'
    # values << milestone

    formatted_cmd << format('-M %d', milestone)

    ## labels/tags
    # unless labels == nil
    #   cmd << '-L %s'
    #   values << labels
    # end

    formatted_cmd << format('-L %s', labels) unless labels == nil

    ## assign to
    # unless assign_to == nil
    #   cmd << '--assign %s'
    #   values << assign_to
    # end

    formatted_cmd << format('--assign %s', assign_to) unless assign_to == nil

    formatted_cmd << format('--claim') if claim == true

    return formatted_cmd.join(' ')

    ## --- nothing is ran below this line ---

    cmd = [cmd.join(' ')] + values
    return format(* cmd)
    message = @args.join(' ')
    ghi = 'ghi open -m "%s" -M %d'
    ghi += ' -L %s' unless labels == nil
    ghi += ' --assign %s' unless assign_to == nil
    format(ghi, message, milestone, labels)
  end

  def parse_options
    @special_options ||= []
    i = 0
    last_arg = :not_started
    same_arg = 0
    while i < args.length
      sopts = []

      next i += 1 unless (arg=args[i]).strip[/:$/] || (arg=args[i]).strip[/:claim/i]

      if last_arg == arg
        same_arg += 1
      else
        same_arg = 0
        last_arg = arg
      end

      break if same_arg > 3

      sopts << arg

      if arg != ':claim'
        sopts += args[(i+1)..-1].take_while do |sarg|
          not (sarg.strip[/:$/] || sarg.strip[/^:claim/])
        end
      end

      @special_options.push sopts
      args.slice!(i, sopts.length)
    end
  end

  def options
    @options ||= OpenStruct.new.tap do |opts|
      # default options go here
      # or pass them to #new as a hash

      opts.show_help = false
    end
  end
end

puts MainCommand.run


#!/usr/bin/env ruby

# 3rd party requirements
require 'awesome_print'
# require 'pry'
require 'optparse'
require 'singleton'
require 'mkmf'
require 'yaml'

# H command requirements

# require 'h/config'
module H
  class Config
    include Singleton

    attr_accessor :original_path, :path
    attr_accessor :hero_path

    def initialize(options={})
      @original_path = Dir.pwd
      @path = options[:path] || Dir.pwd
      @hero_path = format('%s/hero', ENV['HOME'])
    end
  end

  def self.config
    @config ||= Config.instance
  end
end

class InstallFile
  include Singleton

  class << self
    def hero; instance.hero; end
    def file; instance.file; end
    def data; instance.data; end
    def load; instance.load; end
    def bins; instance.bins; end
    def binstubs; instance.binstubs; end
    def templates; instance.templates; end
  end

  def hero
    File.join(ENV['HOME'], 'hero')
  end

  def file
    File.join Dir.pwd, 'install.yml'
  end

  def data
    @data ||= IO.read(file)
  end

  def load
    @load ||= YAML.load(data)
  end

  def bins
    @bin ||= load['bins'] || []
  end

  def binstubs
    @binstubs ||= load['binstubs'] || []
  end

  def templates
    @templates ||= load['templates'] || []
  end
end

# require 'h/env'
module H
  module Env
    extend self

    def path
      ENV['PATH']
    end

    def h_command?(bin)
      find_executable("h-#{bin}").tap do
        File.unlink('mkmf.log') if File.exist?('mkmf.log')
      end
    end
  end

  def self.env
    Env
  end
end


# require 'h/command'
module H
  class Command
    class << self
      def run(args=ARGV.clone, stdin=$stdin)
        new(args, stdin).tap(&:run)
      end
    end

    attr_accessor :original_args, :args, :stdin
    attr_accessor :subcommand

    def initialize(args=ARGV.clone, stdin=$stdin)
      @original_args = args.clone
      @subcommand = args.shift
      @args = args
      @stdin = stdin
    end

    def run
      case subcommand
      # when /n(otes?)?/i
      #   Note.run(args, stdin)
      when /path/i
        system("h-path", *args)
      when /install/i
        install_extension
      when /path/i
        system("h-path", *args)
      when /edit/i
        cmd = args.shift
        if system(format('which h-%s', cmd))
          p = `which h-#{cmd}`.chomp
          system('vim', p)
          exit 0
        elsif system(format('which %s', cmd))
          p = `which #{cmd}`.chomp
          system('vim', p)
          exit 0
        end
        exit 1
      else
        if Env.h_command?(subcommand)
          puts '%s command was found' % subcommand
          system("h-#{subcommand}", *args)
        else
          puts format('%s command not found...', subcommand)
        end
      end
    end

    def install_extension
      InstallFile.bins.each do |b|
        dest = File.join(ENV['HOME'], 'hero', 'bin', File.basename(b))
        File.unlink(dest) if File.exist?(dest)
        File.link(File.join(Dir.pwd, b), dest)
      end

      InstallFile.binstubs.each do |b|
        dest = File.join(ENV['HOME'], 'hero', 'binstubs', File.basename(b))
        File.unlink(dest) if File.exist?(dest)
        File.link(File.join(Dir.pwd, b), dest)
      end

      InstallFile.templates.each do |b|
        dest = File.join(ENV['HOME'], 'hero', 'templates', File.basename(b))
        File.unlink(dest) if File.exist?(dest)
        File.link(File.join(Dir.pwd, b), dest)
      end
    end
  end

  def self.run(args=ARGV.clone, stdin=$stdin)
    Command.run(args, stdin)
  end
end


module H
end

H.run


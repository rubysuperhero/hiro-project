---
stories:
  "/Users/macbookpro/hero/tasks/src/144642129900.md": !ruby/object:CliTasks::Note
    data: 'maintain an archive of all the cli tools i''ve made, records of everytime
      i''ve ran it, when and with what args, periodically remind myself of what tools
      are available and how long it has been since last using it #bash/todo #hero/todo
      #tools/util-archive'
    file: "/Users/macbookpro/hero/tasks/src/144642129900.md"
    lines:
    - 'maintain an archive of all the cli tools i''ve made, records of everytime i''ve
      ran it, when and with what args, periodically remind myself of what tools are
      available and how long it has been since last using it #bash/todo #hero/todo
      #tools/util-archive'
    tags:
    - bash/todo
    - hero/todo
    - tools/util-archive
    metadata: {}
    body:
    - 'maintain an archive of all the cli tools i''ve made, records of everytime i''ve
      ran it, when and with what args, periodically remind myself of what tools are
      available and how long it has been since last using it #bash/todo #hero/todo
      #tools/util-archive'
    name: 'maintain an archive of all the cli tools i''ve made, records of everytime
      i''ve ran it, when and with what args, periodically remind myself of what tools
      are available and how long it has been since last using it #bash/todo #hero/todo
      #tools/util-archive'
  "/Users/macbookpro/hero/tasks/src/144648668400.md": !ruby/object:CliTasks::Note
    data: |+
      reorganize either bin/H or its subcmds to be more project-centric; either that, or make a binstub for each 'project' (see examples below)

      so here is a set of actions, basically a use case
      demonstrating how multiple tools will work together to give
      the developer a simple user experience:

      ```
      # hero project add [project-name] [project-path]

      $> hero project add hiro ~/repos/hero-project

        Adding a new project to $HOME/hero/projects.yml...
          name: 'hiro'
          path: '/Users/unixsuperhero/repos/hero-project'

          Generating binstub...
            Saving to =>
              $HOME/hero/bin/hiro
              $HOME/hero/projects/bin/hiro
          done
        done

      $> hiro task save 'release v0.0.1 of the hero project'
      $> hiro tmux

        Command: tmux new -s hiro -c $HOME/repos/hero-project

      $>
      ```



    file: "/Users/macbookpro/hero/tasks/src/144648668400.md"
    lines:
    - reorganize either bin/H or its subcmds to be more project-centric; either that,
      or make a binstub for each 'project' (see examples below)
    - ''
    - so here is a set of actions, basically a use case
    - demonstrating how multiple tools will work together to give
    - 'the developer a simple user experience:'
    - ''
    - "```"
    - "# hero project add [project-name] [project-path]"
    - ''
    - "$> hero project add hiro ~/repos/hero-project"
    - ''
    - "  Adding a new project to $HOME/hero/projects.yml..."
    - "    name: 'hiro'"
    - "    path: '/Users/unixsuperhero/repos/hero-project'"
    - ''
    - "    Generating binstub..."
    - "      Saving to =>"
    - "        $HOME/hero/bin/hiro"
    - "        $HOME/hero/projects/bin/hiro"
    - "    done"
    - "  done"
    - ''
    - "$> hiro task save 'release v0.0.1 of the hero project'"
    - "$> hiro tmux"
    - ''
    - "  Command: tmux new -s hiro -c $HOME/repos/hero-project"
    - ''
    - "$>"
    - "```"
    - ''
    - ''
    - ''
    tags: []
    metadata: {}
    body:
    - reorganize either bin/H or its subcmds to be more project-centric; either that,
      or make a binstub for each 'project' (see examples below)
    - ''
    - so here is a set of actions, basically a use case
    - demonstrating how multiple tools will work together to give
    - 'the developer a simple user experience:'
    - ''
    - "```"
    - "# hero project add [project-name] [project-path]"
    - ''
    - "$> hero project add hiro ~/repos/hero-project"
    - ''
    - "  Adding a new project to $HOME/hero/projects.yml..."
    - "    name: 'hiro'"
    - "    path: '/Users/unixsuperhero/repos/hero-project'"
    - ''
    - "    Generating binstub..."
    - "      Saving to =>"
    - "        $HOME/hero/bin/hiro"
    - "        $HOME/hero/projects/bin/hiro"
    - "    done"
    - "  done"
    - ''
    - "$> hiro task save 'release v0.0.1 of the hero project'"
    - "$> hiro tmux"
    - ''
    - "  Command: tmux new -s hiro -c $HOME/repos/hero-project"
    - ''
    - "$>"
    - "```"
    - ''
    - ''
    - ''
    name: reorganize either bin/H or its subcmds to be more project-centric; either
      that, or make a binstub for each 'project' (see examples below)
  "/Users/macbookpro/hero/tasks/src/144649033800.md": !ruby/object:CliTasks::Note
    data: 'create "project" subcommand which will add name/path to projects.yml and
      generate a binstub similar to note/task or the heroku binstubs #hero/projects
      #hero/subcmd #projects #todo #subcmd/create'
    file: "/Users/macbookpro/hero/tasks/src/144649033800.md"
    lines:
    - 'create "project" subcommand which will add name/path to projects.yml and generate
      a binstub similar to note/task or the heroku binstubs #hero/projects #hero/subcmd
      #projects #todo #subcmd/create'
    tags:
    - hero/projects
    - hero/subcmd
    - projects
    - subcmd/create
    - todo
    metadata: {}
    body:
    - 'create "project" subcommand which will add name/path to projects.yml and generate
      a binstub similar to note/task or the heroku binstubs #hero/projects #hero/subcmd
      #projects #todo #subcmd/create'
    name: 'create "project" subcommand which will add name/path to projects.yml and
      generate a binstub similar to note/task or the heroku binstubs #hero/projects
      #hero/subcmd #projects #todo #subcmd/create'
  "/Users/macbookpro/hero/tasks/src/144671627900.md": !ruby/object:CliTasks::Note
    data: 'hello world testing one two #three/four #hello/world/this/is/testing'
    file: "/Users/macbookpro/hero/tasks/src/144671627900.md"
    lines:
    - 'hello world testing one two #three/four #hello/world/this/is/testing'
    tags:
    - hello/world/this/is/testing
    - three/four
    metadata: {}
    body:
    - 'hello world testing one two #three/four #hello/world/this/is/testing'
    name: 'hello world testing one two #three/four #hello/world/this/is/testing'
  "/Users/macbookpro/hero/tasks/src/144671756100.md": !ruby/object:CliTasks::Note
    data: 'hello world one #one #tow/three/four'
    file: "/Users/macbookpro/hero/tasks/src/144671756100.md"
    lines:
    - 'hello world one #one #tow/three/four'
    tags:
    - one
    - tow/three/four
    metadata: {}
    body:
    - 'hello world one #one #tow/three/four'
    name: 'hello world one #one #tow/three/four'
  "/Users/macbookpro/hero/tasks/src/144671784400.md": !ruby/object:CliTasks::Note
    data: 'hello world one #one #tow/three/four'
    file: "/Users/macbookpro/hero/tasks/src/144671784400.md"
    lines:
    - 'hello world one #one #tow/three/four'
    tags:
    - one
    - tow/three/four
    metadata: {}
    body:
    - 'hello world one #one #tow/three/four'
    name: 'hello world one #one #tow/three/four'
  "/Users/macbookpro/hero/tasks/src/144684769000.md": !ruby/object:CliTasks::Note
    data: "#todo go thru zsh history to find frequently used git/shell recipes"
    file: "/Users/macbookpro/hero/tasks/src/144684769000.md"
    lines:
    - "#todo go thru zsh history to find frequently used git/shell recipes"
    tags:
    - todo
    metadata: {}
    body:
    - "#todo go thru zsh history to find frequently used git/shell recipes"
    name: "#todo go thru zsh history to find frequently used git/shell recipes"
  "/Users/macbookpro/hero/tasks/src/144688744200.md": !ruby/object:CliTasks::Note
    data: |
      write an article expaining all the reasons why i write my POROs the way i do

      and the 3 ways to return the instance from a class method

      1. tempvar = new(); tempvar.run; tempvar
      2. new().tap(&:run)
      3. new().run; # and #run will return `self`

      #hero/training #todo/training
    file: "/Users/macbookpro/hero/tasks/src/144688744200.md"
    lines:
    - write an article expaining all the reasons why i write my POROs the way i do
    - ''
    - and the 3 ways to return the instance from a class method
    - ''
    - 1. tempvar = new(); tempvar.run; tempvar
    - 2. new().tap(&:run)
    - '3. new().run; # and #run will return `self`'
    - ''
    - "#hero/training #todo/training"
    tags:
    - hero/training
    - run
    - todo/training
    metadata: {}
    body:
    - write an article expaining all the reasons why i write my POROs the way i do
    - ''
    - and the 3 ways to return the instance from a class method
    - ''
    - 1. tempvar = new(); tempvar.run; tempvar
    - 2. new().tap(&:run)
    - '3. new().run; # and #run will return `self`'
    - ''
    - "#hero/training #todo/training"
    name: write an article expaining all the reasons why i write my POROs the way
      i do
  "/Users/macbookpro/hero/tasks/src/144688744201.md": !ruby/object:CliTasks::Note
    data: |
      prepare an exercise demonstrating how to write tests for a 300 line legacy
      method

      #todo/training
    file: "/Users/macbookpro/hero/tasks/src/144688744201.md"
    lines:
    - prepare an exercise demonstrating how to write tests for a 300 line legacy
    - method
    - ''
    - "#todo/training"
    tags:
    - todo/training
    metadata: {}
    body:
    - prepare an exercise demonstrating how to write tests for a 300 line legacy
    - method
    - ''
    - "#todo/training"
    name: prepare an exercise demonstrating how to write tests for a 300 line legacy
  "/Users/macbookpro/hero/tasks/src/144688744202.md": !ruby/object:CliTasks::Note
    data: |
      prepare a lesson about writing pseudocode and making real code out of it

      #todo/training
    file: "/Users/macbookpro/hero/tasks/src/144688744202.md"
    lines:
    - prepare a lesson about writing pseudocode and making real code out of it
    - ''
    - "#todo/training"
    tags:
    - todo/training
    metadata: {}
    body:
    - prepare a lesson about writing pseudocode and making real code out of it
    - ''
    - "#todo/training"
    name: prepare a lesson about writing pseudocode and making real code out of it
tags:
  bash/todo: []
  hero/todo: []
  tools/util-archive: []
  hero/projects: []
  hero/subcmd: []
  projects: []
  subcmd/create: []
  todo: []
  hello/world/this/is/testing: []
  three/four: []
  one: []
  tow/three/four: []
  hero/training: []
  run: []
  todo/training: []

---
stories:
  "/Users/macbookpro/hero/tips/src/144641364200.md": !ruby/object:CliTasks::Note
    data: |+
      favor hardlinks over symlinks, when possible.  for example, a symlink can break
      for any number of reasons, not only is it harder to break a hardlink, but its
      content is tracked in git like a normal file.

      imagine a simple git repo that contains 2 links to a file, a symlink and a
      hardlink.  the original file that they both link to is not tracked by the git
      repo, because it is located in a different folder.  if someone using a different
      computer clones the repo and the original file doesn't exist, the hardlink will
      still be identical to the original file, but the symlink will be broken.

      #bash #git #symlink #hardlink #files

    file: "/Users/macbookpro/hero/tips/src/144641364200.md"
    lines:
    - favor hardlinks over symlinks, when possible.  for example, a symlink can break
    - for any number of reasons, not only is it harder to break a hardlink, but its
    - content is tracked in git like a normal file.
    - ''
    - imagine a simple git repo that contains 2 links to a file, a symlink and a
    - hardlink.  the original file that they both link to is not tracked by the git
    - repo, because it is located in a different folder.  if someone using a different
    - computer clones the repo and the original file doesn't exist, the hardlink will
    - still be identical to the original file, but the symlink will be broken.
    - ''
    - "#bash #git #symlink #hardlink #files"
    - ''
    tags:
    - bash
    - files
    - git
    - hardlink
    - symlink
    metadata: {}
    body:
    - favor hardlinks over symlinks, when possible.  for example, a symlink can break
    - for any number of reasons, not only is it harder to break a hardlink, but its
    - content is tracked in git like a normal file.
    - ''
    - imagine a simple git repo that contains 2 links to a file, a symlink and a
    - hardlink.  the original file that they both link to is not tracked by the git
    - repo, because it is located in a different folder.  if someone using a different
    - computer clones the repo and the original file doesn't exist, the hardlink will
    - still be identical to the original file, but the symlink will be broken.
    - ''
    - "#bash #git #symlink #hardlink #files"
    - ''
    name: favor hardlinks over symlinks, when possible.  for example, a symlink can
      break
  "/Users/macbookpro/hero/tips/src/144642214000.md": !ruby/object:CliTasks::Note
    data: |
      ignore or include hidden files when running a cmd on "everything"

      the difference between passing `.` and `*` to a command when you want to
      indicate the current directory

      * `.` will usually include dotfiles, since they exist in the current directory
      * `*`, on the other hand, will match all non-hidden files in the pwd.  if you
        are in a situation where you want to stick with `*`, but also want dotfiles
        included in the arg list, add `.*` like this: `* .*`.

      #bash #bash/file-patterns #bash/glob #bash/glob-pattern
      #zsh #zsh/file-patterns #zsh/glob #zsh/glob-pattern
      #files #files/glob-patterns #files/hidden-files
    file: "/Users/macbookpro/hero/tips/src/144642214000.md"
    lines:
    - ignore or include hidden files when running a cmd on "everything"
    - ''
    - the difference between passing `.` and `*` to a command when you want to
    - indicate the current directory
    - ''
    - "* `.` will usually include dotfiles, since they exist in the current directory"
    - "* `*`, on the other hand, will match all non-hidden files in the pwd.  if you"
    - "  are in a situation where you want to stick with `*`, but also want dotfiles"
    - "  included in the arg list, add `.*` like this: `* .*`."
    - ''
    - "#bash #bash/file-patterns #bash/glob #bash/glob-pattern"
    - "#zsh #zsh/file-patterns #zsh/glob #zsh/glob-pattern"
    - "#files #files/glob-patterns #files/hidden-files"
    tags:
    - bash
    - bash/file-patterns
    - bash/glob
    - bash/glob-pattern
    - files
    - files/glob-patterns
    - files/hidden-files
    - zsh
    - zsh/file-patterns
    - zsh/glob
    - zsh/glob-pattern
    metadata: {}
    body:
    - ignore or include hidden files when running a cmd on "everything"
    - ''
    - the difference between passing `.` and `*` to a command when you want to
    - indicate the current directory
    - ''
    - "* `.` will usually include dotfiles, since they exist in the current directory"
    - "* `*`, on the other hand, will match all non-hidden files in the pwd.  if you"
    - "  are in a situation where you want to stick with `*`, but also want dotfiles"
    - "  included in the arg list, add `.*` like this: `* .*`."
    - ''
    - "#bash #bash/file-patterns #bash/glob #bash/glob-pattern"
    - "#zsh #zsh/file-patterns #zsh/glob #zsh/glob-pattern"
    - "#files #files/glob-patterns #files/hidden-files"
    name: ignore or include hidden files when running a cmd on "everything"
  "/Users/macbookpro/hero/tips/src/144689013800.md": !ruby/object:CliTasks::Note
    data: |
      using symbolic-ref to make branch aliases is great because...

      1. it lets you access common branches with few keystrokes
      2. lets you have naming conventions to improve your workflow
      3. great for typing short checkout, cherry, cherry-pick, diff, etc. commands

      # Convention Example

      Whenever starting a feature branch, alias it as `feat`.
      Alias the branches that mirror remotes, with shorter names. `qa`, etc.

      #git #git/branch #git/symbolic-ref
    file: "/Users/macbookpro/hero/tips/src/144689013800.md"
    lines:
    - using symbolic-ref to make branch aliases is great because...
    - ''
    - 1. it lets you access common branches with few keystrokes
    - 2. lets you have naming conventions to improve your workflow
    - 3. great for typing short checkout, cherry, cherry-pick, diff, etc. commands
    - ''
    - "# Convention Example"
    - ''
    - Whenever starting a feature branch, alias it as `feat`.
    - Alias the branches that mirror remotes, with shorter names. `qa`, etc.
    - ''
    - "#git #git/branch #git/symbolic-ref"
    tags:
    - git
    - git/branch
    - git/symbolic-ref
    metadata: {}
    body:
    - using symbolic-ref to make branch aliases is great because...
    - ''
    - 1. it lets you access common branches with few keystrokes
    - 2. lets you have naming conventions to improve your workflow
    - 3. great for typing short checkout, cherry, cherry-pick, diff, etc. commands
    - ''
    - "# Convention Example"
    - ''
    - Whenever starting a feature branch, alias it as `feat`.
    - Alias the branches that mirror remotes, with shorter names. `qa`, etc.
    - ''
    - "#git #git/branch #git/symbolic-ref"
    name: using symbolic-ref to make branch aliases is great because...
  "/Users/macbookpro/hero/tips/src/144689089400.md": !ruby/object:CliTasks::Note
    data: |
      how to use `:il` so that it only looks in the current file

      write a shell script that will give u the first line number after the last
      require command

      #vim
    file: "/Users/macbookpro/hero/tips/src/144689089400.md"
    lines:
    - how to use `:il` so that it only looks in the current file
    - ''
    - write a shell script that will give u the first line number after the last
    - require command
    - ''
    - "#vim"
    tags:
    - vim
    metadata: {}
    body:
    - how to use `:il` so that it only looks in the current file
    - ''
    - write a shell script that will give u the first line number after the last
    - require command
    - ''
    - "#vim"
    name: how to use `:il` so that it only looks in the current file
  "/Users/macbookpro/hero/tips/src/144689089401.md": !ruby/object:CliTasks::Note
    data: |
      using a "start" file can drastically improve your vim speed

      create mappings to:

      - refresh the start file
      - change the current buffer to the start file

      #vim  #vim/start
    file: "/Users/macbookpro/hero/tips/src/144689089401.md"
    lines:
    - using a "start" file can drastically improve your vim speed
    - ''
    - 'create mappings to:'
    - ''
    - "- refresh the start file"
    - "- change the current buffer to the start file"
    - ''
    - "#vim  #vim/start"
    tags:
    - vim
    - vim/start
    metadata: {}
    body:
    - using a "start" file can drastically improve your vim speed
    - ''
    - 'create mappings to:'
    - ''
    - "- refresh the start file"
    - "- change the current buffer to the start file"
    - ''
    - "#vim  #vim/start"
    name: using a "start" file can drastically improve your vim speed
  "/Users/macbookpro/hero/tips/src/144689089402.md": !ruby/object:CliTasks::Note
    data: |
      one main reason i love `:b` is because it only requires the shortest uniq match
      of the filename to switch to that buffer

      (see: my vf cabbrev)

      #vim #vim/buffers #vim/commands
    file: "/Users/macbookpro/hero/tips/src/144689089402.md"
    lines:
    - one main reason i love `:b` is because it only requires the shortest uniq match
    - of the filename to switch to that buffer
    - ''
    - "(see: my vf cabbrev)"
    - ''
    - "#vim #vim/buffers #vim/commands"
    tags:
    - vim
    - vim/buffers
    - vim/commands
    metadata: {}
    body:
    - one main reason i love `:b` is because it only requires the shortest uniq match
    - of the filename to switch to that buffer
    - ''
    - "(see: my vf cabbrev)"
    - ''
    - "#vim #vim/buffers #vim/commands"
    name: one main reason i love `:b` is because it only requires the shortest uniq
      match
  "/Users/macbookpro/hero/tips/src/144692694700.md": !ruby/object:CliTasks::Note
    data: "#vim lets you define a leader key for a reason - avoid mappings that overwrite
      standard shortcuts, no matter how obscure they seem at the time"
    file: "/Users/macbookpro/hero/tips/src/144692694700.md"
    lines:
    - "#vim lets you define a leader key for a reason - avoid mappings that overwrite
      standard shortcuts, no matter how obscure they seem at the time"
    tags:
    - vim
    metadata: {}
    body:
    - "#vim lets you define a leader key for a reason - avoid mappings that overwrite
      standard shortcuts, no matter how obscure they seem at the time"
    name: "#vim lets you define a leader key for a reason - avoid mappings that overwrite
      standard shortcuts, no matter how obscure they seem at the time"
tags:
  bash: []
  files: []
  git: []
  hardlink: []
  symlink: []
  bash/file-patterns: []
  bash/glob: []
  bash/glob-pattern: []
  files/glob-patterns: []
  files/hidden-files: []
  zsh: []
  zsh/file-patterns: []
  zsh/glob: []
  zsh/glob-pattern: []
  git/branch: []
  git/symbolic-ref: []
  vim: []
  vim/start: []
  vim/buffers: []
  vim/commands: []
